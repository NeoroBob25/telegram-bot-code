import os
import sys
import json
import sqlite3
import urllib.parse
import importlib
import asyncio
import requests
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = "8097225217:AAERSuN5K68msP6JZzpSG9NR7XiDTeXBH6Y"  # –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ü–µ —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 385298897  # –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ü–µ —Ç–≤—ñ–π Telegram ID
ALLOWED_USERS = [385298897, 666567798]  # –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
CODE_UPDATE_URL = "https://raw.githubusercontent.com/bohdan123/telegram-bot-code/main/bot.py"  # –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π URL —Ç–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é

# –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_PATH = "/data/bot.db" if os.getenv("FLY_APP_NAME") else "bot.db"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)
router = Router()

# –ö–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—É
class SetTrainings(StatesGroup):
    new_trainings = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS clients
                     (user_id INTEGER, client_name TEXT, trainings INTEGER, contact TEXT, profile TEXT, archive TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS members
                     (user_id INTEGER PRIMARY KEY, chat_id INTEGER, interacted INTEGER, role TEXT)''')
        conn.commit()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.")
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

init_db()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def load_clients(user_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT client_name, trainings, contact, profile, archive FROM clients WHERE user_id = ?", (user_id,))
        clients = {}
        for row in c.fetchall():
            client_name, trainings, contact, profile, archive = row
            clients[client_name] = {
                "trainings": trainings,
                "contact": contact,
                "profile": profile,
                "archive": archive
            }
        conn.close()
        return clients
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
        return {}

def save_client(user_id, client_name, client_data):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT OR REPLACE INTO clients (user_id, client_name, trainings, contact, profile, archive)
                     VALUES (?, ?, ?, ?, ?, ?)''',
                  (user_id, client_name, client_data["trainings"], client_data.get("contact", ""),
                   client_data.get("profile", ""), client_data.get("archive", "")))
        conn.commit()
        conn.close()
        print(f"–ö–ª—ñ—î–Ω—Ç {client_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è user_id={user_id}")
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {e}")

def load_members():
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT user_id, chat_id, interacted, role FROM members")
        members = {}
        for row in c.fetchall():
            user_id, chat_id, interacted, role = row
            members[user_id] = {
                "chat_id": chat_id,
                "interacted": bool(interacted),
                "role": role
            }
        conn.close()
        return members
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–ª–µ–Ω—ñ–≤: {e}")
        return {}

def save_member(user_id, member_data):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT OR REPLACE INTO members (user_id, chat_id, interacted, role)
                     VALUES (?, ?, ?, ?)''',
                  (user_id, member_data["chat_id"], int(member_data["interacted"]), member_data.get("role", "user")))
        conn.commit()
        conn.close()
        print(f"–ß–ª–µ–Ω {user_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–ª–µ–Ω–∞: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫–∏
@router.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    chat_id = message.chat.id

    print(f"User ID: {user_id}, Chat ID: {chat_id}, Username: {username}")
    members = load_members()
    if user_id in ALLOWED_USERS:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
                [KeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ñ—Ç–∞—é, –ë–æ–≥–¥–∞–Ω–µ! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=keyboard)
        if user_id not in members:
            members[user_id] = {"chat_id": chat_id, "interacted": True, "role": "admin"}
            save_member(user_id, members[user_id])
    elif user_id in members and members[user_id].get("role") == "trainer":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
            ],
            resize_keyboard=True
        )
        await message.answer(f"–í—ñ—Ç–∞—é, {username}! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=keyboard)
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")]],
            resize_keyboard=True
        )
        await message.answer("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä—ñ–≤. –Ø–∫—â–æ —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø, —è –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º–∏.", reply_markup=keyboard)
        if user_id not in members:
            members[user_id] = {"chat_id": chat_id, "interacted": True, "role": "user"}
            save_member(user_id, members[user_id])

@router.message(lambda message: message.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ")
async def learn_more(message: Message):
    user_id = message.from_user.id
    members = load_members()
    if user_id in members and members[user_id].get("role") == "trainer":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í–∏ —Ç—Ä–µ–Ω–µ—Ä! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=keyboard)
    else:
        await message.answer("–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(lambda message: message.text == "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
async def add_client(message: Message, state: FSMContext):
    user_id = message.from_user.id
    members = load_members()
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:")
    await state.set_state("add_client_name")

@router.message(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
async def view_clients(message: Message):
    user_id = message.from_user.id
    members = load_members()
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")
        return

    user_clients = load_clients(user_id)
    if not user_clients:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç—ñ–≤. –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ '–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞'.")
        return

    for name, data in user_clients.items():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è +1", callback_data=f"add_training_{user_id}_{urllib.parse.quote(name)}"),
             InlineKeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data=f"set_trainings_{user_id}_{urllib.parse.quote(name)}")],
            [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_client_{user_id}_{urllib.parse.quote(name)}")]
        ])
        await message.answer(f"–ö–ª—ñ—î–Ω—Ç: {name}\n–¢—Ä–µ–Ω—É–≤–∞–Ω—å: {data['trainings']}", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("add_training_"))
async def add_training(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_", 2)
        user_id = int(parts[1])
        name = urllib.parse.unquote(parts[2])
    except (ValueError, IndexError) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ callback.data: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", show_alert=True)
        return

    members = load_members()
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return

    user_clients = load_clients(user_id)
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    user_clients[name]["trainings"] = user_clients[name].get("trainings", 0) + 1
    save_client(user_id, name, user_clients[name])
    await callback.message.edit_text(f"–ö–ª—ñ—î–Ω—Ç: {name}\n–¢—Ä–µ–Ω—É–≤–∞–Ω—å: {user_clients[name]['trainings']}",
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(text="‚û°Ô∏è +1", callback_data=f"add_training_{user_id}_{urllib.parse.quote(name)}"),
                                         InlineKeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data=f"set_trainings_{user_id}_{urllib.parse.quote(name)}")],
                                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_client_{user_id}_{urllib.parse.quote(name)}")]
                                    ]))
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("set_trainings_"))
async def set_trainings(callback: types.CallbackQuery, state: FSMContext):
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback –¥–ª—è set_trainings: {callback.data}")
    try:
        parts = callback.data.split("_", 2)
        if len(parts) != 3 or parts[0] != "set_trainings":
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback.data: {callback.data}")
        user_id = int(parts[1])
        name = urllib.parse.unquote(parts[2])
    except (ValueError, IndexError) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ callback.data: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", show_alert=True)
        return

    members = load_members()
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return

    user_clients = load_clients(user_id)
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    await state.update_data(user_id=user_id, name=name)
    print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ: user_id={user_id}, name={name}")
    await state.set_state(SetTrainings.new_trainings)
    print(f"–ü–µ—Ä–µ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω SetTrainings.new_trainings –¥–ª—è {name}")
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {name} (—á–∏—Å–ª–æ):", reply_markup=None)
    await callback.answer()

@router.message(SetTrainings.new_trainings, lambda message: message.text.isdigit())
async def process_new_trainings(message: Message, state: FSMContext):
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ SetTrainings.new_trainings: {message.text}")
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    print(f"–î–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É: user_id={user_id}, name={name}")
    user_clients = load_clients(user_id)
    try:
        new_trainings = int(message.text)
        if new_trainings < 0:
            raise ValueError
        user_clients[name]["trainings"] = new_trainings
        save_client(user_id, name, user_clients[name])
        await message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_trainings}.")
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("delete_client_"))
async def delete_client(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_", 2)
        user_id = int(parts[1])
        name = urllib.parse.unquote(parts[2])
    except (ValueError, IndexError) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ callback.data: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", show_alert=True)
        return

    members = load_members()
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return

    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("DELETE FROM clients WHERE user_id = ? AND client_name = ?", (user_id, name))
        conn.commit()
        conn.close()
        await callback.message.delete()
        await callback.answer(f"–ö–ª—ñ—î–Ω—Ç–∞ {name} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except sqlite3.Error as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.", show_alert=True)

@router.message(lambda message: message.text == "–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞")
async def open_access(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø:")

@router.message(lambda message: message.text.isdigit())
async def process_access(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!")
        return

    new_user_id = int(message.text)
    members = load_members()
    if new_user_id in members:
        members[new_user_id]["role"] = "trainer"
        save_member(new_user_id, members[new_user_id])
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID {new_user_id} –Ω–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ —Ç—Ä–µ–Ω–µ—Ä–∞.")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {new_user_id} —â–µ –Ω–µ –≤–∑–∞—î–º–æ–¥—ñ—è–≤ –∑ –±–æ—Ç–æ–º.")

@router.message(Command("update"))
async def update_code(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    try:
        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–¥ —ñ–∑ {CODE_UPDATE_URL}")
        response = requests.get(CODE_UPDATE_URL)
        if response.status_code != 200:
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É: {response.status_code}")
            return

        new_code = response.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        temp_file_path = "/data/bot_temp.py" if os.getenv("FLY_APP_NAME") else "bot_temp.py"
        print(f"–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —É {temp_file_path}")
        with open(temp_file_path, "w", encoding="utf-8") as f:
            f.write(new_code)

        print("–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—è...")
        if "bot" in sys.modules:
            importlib.reload(sys.modules["bot"])
            print("–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
        else:
            importlib.import_module("bot")
            print("–ú–æ–¥—É–ª—å —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ.")

        global router, dp
        router = Router()
        dp.include_router(router)

        print("–†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏...")
        register_handlers()
        print("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ.")

        await message.answer("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! –ó–∞—á–µ–∫–∞–π –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ —ñ –≤–∏–∫–æ–Ω–∞–π /start –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å, —â–æ–± Fly.io –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞
        print("–ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É...")
        os._exit(0)  # –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {str(e)}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {str(e)}")

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def register_handlers():
    router.message.register(handle_start, Command("start"))
    router.message.register(update_code, Command("update"))
    # –î–æ–¥–∞–π —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞...")
    dp.include_router(router)
    try:
        print("–í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫...")
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise
    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ polling...")
    await dp.start_polling(bot)
    print("Polling –∑–∞–ø—É—â–µ–Ω–æ.")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
