import os
import asyncio
import json
import urllib.parse
import re
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –¢–≤—ñ–π user_id —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 385298897
ALLOWED_USERS = {ADMIN_ID}  # –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)

clients_file = "/data/clients.json"  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —à–ª—è—Ö –¥–ª—è Fly Volumes
members_file = "/data/members.json"  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ —à–ª—è—Ö –¥–ª—è Fly Volumes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
def load_data():
    global clients, members
    try:
        with open(clients_file, "r", encoding="utf-8") as f:
            clients = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        clients = {}
    try:
        with open(members_file, "r", encoding="utf-8") as f:
            members = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        members = {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª–∏
def save_clients():
    os.makedirs(os.path.dirname(clients_file), exist_ok=True)
    with open(clients_file, "w", encoding="utf-8") as f:
        json.dump(clients, f, ensure_ascii=False, indent=4)

def save_members():
    os.makedirs(os.path.dirname(members_file), exist_ok=True)
    with open(members_file, "w", encoding="utf-8") as f:
        json.dump(members, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —á–∏—Å–µ–ª —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç—ñ–ª–∞
def parse_body_params(params):
    if not params or params == "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
        return {}
    measurements = {}
    pattern = r"(\w+):\s*(\d+\.?\d*)\s*(—Å–º|kg)?"
    matches = re.finditer(pattern, params)
    for match in matches:
        key, value, unit = match.groups()
        measurements[key] = float(value)
    return measurements

# –°—Ç–∞–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
class AddClient(StatesGroup):
    name = State()
    trainings = State()
    contact = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
class EditProfile(StatesGroup):
    weight = State()
    age = State()
    body_params = State()
    extra_info = State()
    photos = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
class SetTrainings(StatesGroup):
    new_trainings = State()

# –°—Ç–∞–Ω–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º
class ManageAccess(StatesGroup):
    user_id = State()
    access_type = State()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
load_data()

# –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    chat_id = message.chat.id

    print(f"User ID: {user_id}, Chat ID: {chat_id}, Username: {username}")
    if user_id in ALLOWED_USERS:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
                [KeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ñ—Ç–∞—é, –ë–æ–≥–¥–∞–Ω–µ! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=keyboard)
        if user_id not in members:
            members[user_id] = {"chat_id": chat_id, "interacted": True, "role": "admin"}
            save_members()
    elif user_id in members and members[user_id].get("role") == "trainer":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞:", reply_markup=keyboard)
    else:
        if user_id not in members or not members.get(user_id, {}).get("interacted", False):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–¢–∞–∫ - —Å—Ç–∞—é —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥–∏", callback_data=f"join_{user_id}")],
                [InlineKeyboardButton(text="–ù—ñ, –¥—è–∫—É—é", callback_data=f"decline_{user_id}")]
            ])
            await message.answer(
                "–ü—Ä–∏–≤—ñ—Ç, –¥—Ä—É–∂–µ! –Ø–∫—â–æ –º–∞—î—à –±–∞–∂–∞–Ω–Ω—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥–æ–ø—ñ—á–Ω–∏—Ö –ë–æ–≥–¥–∞–Ω–∞, —â–æ–± —è –ø–æ—Ç—ñ–º –º—ñ–≥ —Å–ø–æ–≤—ñ—â–∞—Ç–∏ —Ç–µ–±–µ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, —Ç–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ:",
                reply_markup=keyboard
            )
            if user_id not in members:
                members[user_id] = {"chat_id": chat_id, "interacted": False}
            else:
                members[user_id]["interacted"] = False
            save_members()
        else:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –º–æ—ó—Ö –¥–∞–Ω–∏—Ö")],
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ñ—Ç–∞—é! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó –¥–ª—è —Ç–µ–±–µ:", reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–æ–º–∞–Ω–¥–∏
@router.callback_query(lambda c: c.data.startswith("join_"))
async def join_team(callback: types.CallbackQuery):
    user_id = int(callback.data.replace("join_", ""))
    if user_id == callback.from_user.id:
        username = callback.from_user.username or f"User_{user_id}"
        chat_id = callback.message.chat.id
        members[user_id] = {"chat_id": chat_id, "interacted": True}
        save_members()
        clients[username] = {"trainings": 0, "contact": f"@{username}" if username.startswith("User_") else f"@{username}"}
        save_clients()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        await callback.message.edit_text("–î—è–∫—É—é! –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ –ë–æ–≥–¥–∞–Ω–∞.", reply_markup=keyboard)
        await callback.answer()
    else:
        await callback.answer("–¶–µ –Ω–µ —Ç–≤–æ—è –¥—ñ—è! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", show_alert=True)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º–æ–≤–∏
@router.callback_query(lambda c: c.data.startswith("decline_"))
async def decline_team(callback: types.CallbackQuery):
    user_id = int(callback.data.replace("decline_", ""))
    if user_id == callback.from_user.id:
        members[user_id] = {"chat_id": callback.message.chat.id, "interacted": True}
        save_members()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        await callback.message.edit_text("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à, –∑–∞–ø—É—Å—Ç–∏ /start –∑–Ω–æ–≤—É.")
        await callback.answer()
    else:
        await callback.answer("–¶–µ –Ω–µ —Ç–≤–æ—è –¥—ñ—è! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", show_alert=True)

# –ü–µ—Ä–µ–≥–ª—è–¥ –º–æ—ó—Ö –¥–∞–Ω–∏—Ö
@router.message(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–¥ –º–æ—ó—Ö –¥–∞–Ω–∏—Ö")
async def view_my_data(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    if user_id not in members or not members[user_id]["interacted"]:
        await message.answer("–í–∏ –Ω–µ —î —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥–∏. –ó–∞–ø—É—Å—Ç—ñ—Ç—å /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.")
        return
    if username in clients:
        info = clients[username]
        response = f"–í–∞—à—ñ –¥–∞–Ω—ñ:\nüë§ {username} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {info['trainings']}"
        await message.answer(response)
    else:
        await message.answer("–í–∞—à—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ë–æ–≥–¥–∞–Ω–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.")

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
@router.message(Command("refresh"))
async def refresh_data(message: Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    load_data()  # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    if user_id in ALLOWED_USERS:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
                [KeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞")],
            ],
            resize_keyboard=True
        )
        await message.answer("–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ! –û—Å—å –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω:", reply_markup=keyboard)
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
            ],
            resize_keyboard=True
        )
        await message.answer("–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ! –û—Å—å –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω:", reply_markup=keyboard)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
@router.message(lambda message: message.text == "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
async def add_client(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ë–æ–≥–¥–∞–Ω–∞.")
        return
    await state.update_data(user_id=user_id)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.set_state(AddClient.name)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:\n–ü—Ä–∏–º—ñ—Ç–∫–∞: –∫–ª—ñ—î–Ω—Ç –º–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏ /start —É –±–æ—Ç–∞.")

@router.message(AddClient.name)
async def add_client_step_2(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        await state.clear()
        return
    await state.update_data(name=message.text)
    await state.set_state(AddClient.trainings)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:")

@router.message(AddClient.trainings)
async def add_client_step_3(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        await state.clear()
        return
    try:
        trainings = int(message.text)
        if trainings < 0:
            raise ValueError
        await state.update_data(trainings=trainings)
        await state.set_state(AddClient.contact)
        await message.answer("–í–∫–∞–∂—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username):")
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!")

@router.message(AddClient.contact)
async def add_client_final(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        await state.clear()
        return
    data = await state.get_data()
    user_id = data["user_id"]
    clients.setdefault(str(user_id), {})[data['name']] = {"trainings": data['trainings'], "contact": message.text}
    save_clients()
    await state.clear()
    await message.answer(f"–ö–ª—ñ—î–Ω—Ç–∞ {data['name']} –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}!")

# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤
@router.message(lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
async def view_clients(message: Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ë–æ–≥–¥–∞–Ω–∞.")
        return
    user_clients = clients.get(str(user_id), {})
    if not user_clients:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for name, info in user_clients.items():
        response += f"üë§ {name} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {info['trainings']} | üìû {info['contact']}\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚¨ÖÔ∏è -1 {name}", callback_data=f"decrease_{user_id}_{name}"),
            InlineKeyboardButton(text=f"‚û°Ô∏è +1 {name}", callback_data=f"increase_{user_id}_{name}"),
            InlineKeyboardButton(text=f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {name}", callback_data=f"delete_{user_id}_{name}"),
            InlineKeyboardButton(text=f"‚ÑπÔ∏è {name}", callback_data=f"info_{user_id}_{name}")
        ])
    await message.answer(response, reply_markup=keyboard)

# –ó–º—ñ–Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
@router.callback_query(lambda c: c.data.startswith("decrease_") or c.data.startswith("increase_"))
async def change_trainings(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    action, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    if action == "decrease":
        user_clients[name]["trainings"] = max(0, user_clients[name]["trainings"] - 1)
        change = "-1"
    else:
        user_clients[name]["trainings"] += 1
        change = "+1"
    save_clients()
    notification_text = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {user_clients[name]['trainings']} ‚úÖ"
    contact = user_clients[name]["contact"]
    encoded_text = urllib.parse.quote(notification_text)
    url = f"tg://resolve?domain={contact[1:]}&text={encoded_text}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", url=url)],
        [InlineKeyboardButton(text="üìù –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data=f"set_trainings_{user_id}_{name}")]
    ])
    await callback.message.edit_text(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {user_clients[name]['trainings']}\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥—ñ–π:", reply_markup=keyboard)
    await callback.answer()

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_client(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name in user_clients:
        del user_clients[name]
        save_clients()
        await callback.message.edit_text(f"–ö–ª—ñ—î–Ω—Ç–∞ {name} –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=None)
    else:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    await callback.answer()

# –ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç–∏
@router.callback_query(lambda c: c.data.startswith("info_"))
async def show_client_info(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    client = user_clients[name]
    profile = client.get("profile", {})
    photos = "\n".join([f"üì∑ {photo}" for photo in profile.get("photos", [])[:3]]) or "–ù–µ–º–∞—î —Å–≤—ñ—Ç–ª–∏–Ω"
    info_text = (
        f"üìã –ê–Ω–∫–µ—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞: {name}\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞: {profile.get('weight', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–í—ñ–∫: {profile.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞: {profile.get('body_params', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {profile.get('extra_info', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°–≤—ñ—Ç–ª–∏–Ω–∏: {photos}\n"
        f"–î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É: {profile.get('progress_date', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data=f"edit_profile_{user_id}_{name}")],
        [InlineKeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º", callback_data=f"share_profile_{user_id}_{name}")],
        [InlineKeyboardButton(text="–ê—Ä—Ö—ñ–≤ –ø—Ä–æ–≥—Ä–µ—Å—É", callback_data=f"view_archive_{user_id}_{name}")],
        [InlineKeyboardButton(text="–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data=f"analyze_results_{user_id}_{name}")]
    ])
    await callback.message.edit_text(info_text, reply_markup=keyboard)
    await callback.answer()

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∑ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—î—é
@router.callback_query(lambda c: c.data.startswith("edit_profile_"))
async def edit_client_profile(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    current_profile = user_clients[name].get("profile", {})
    if current_profile and any(current_profile.values()):
        archive_entry = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "weight": current_profile.get("weight", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "age": current_profile.get("age", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "body_params": current_profile.get("body_params", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "extra_info": current_profile.get("extra_info", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            "photos": current_profile.get("photos", [])
        }
        user_clients[name].setdefault("progress_archive", []).append(archive_entry)

    await state.update_data(user_id=user_id, name=name)
    await state.set_state(EditProfile.weight)
    await callback.message.edit_text("–í–∫–∞–∂—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –≤–∞–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 80 –∫–≥) –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:", reply_markup=None)
    await callback.answer()

@router.message(EditProfile.weight)
async def set_weight(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    user_clients[name].setdefault("profile", {})["weight"] = message.text or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.set_state(EditProfile.age)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –≤—ñ–∫ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:")

@router.message(EditProfile.age)
async def set_age(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    user_clients[name]["profile"]["age"] = message.text or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.set_state(EditProfile.body_params)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¢–∞–ª—ñ—è: 85 —Å–º) –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:")

@router.message(EditProfile.body_params)
async def set_body_params(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    user_clients[name]["profile"]["body_params"] = message.text or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.set_state(EditProfile.extra_info)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:")

@router.message(EditProfile.extra_info)
async def set_extra_info(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    user_clients[name]["profile"]["extra_info"] = message.text or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    await state.set_state(EditProfile.photos)
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å 1‚Äì3 —Å–≤—ñ—Ç–ª–∏–Ω–∏ (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ /skip):")

@router.message(EditProfile.photos)
async def set_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    photos = user_clients[name]["profile"].get("photos", [])
    if message.text == "/skip" or not message.photo:
        pass
    elif message.photo and len(photos) < 3:
        photo_id = message.photo[-1].file_id
        photos.append(photo_id)
        user_clients[name]["profile"]["photos"] = photos[:3]
    user_clients[name]["profile"]["progress_date"] = datetime.now().strftime("%Y-%m-%d")
    save_clients()
    await state.clear()
    await message.answer(f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è {name} –æ–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞—Ç–∏—Å–Ω–∏ '‚ÑπÔ∏è' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")

# –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–æ—é
@router.callback_query(lambda c: c.data.startswith("share_profile_"))
async def share_client_profile(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    client = user_clients[name]
    profile = client.get("profile", {})
    photos = profile.get("photos", [])
    info_text = (
        f"üìã –ê–Ω–∫–µ—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞: {name}\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞: {profile.get('weight', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–í—ñ–∫: {profile.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞: {profile.get('body_params', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {profile.get('extra_info', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–∞—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É: {profile.get('progress_date', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}"
    )
    contact = client["contact"]
    if contact.startswith("@"):
        target = contact[1:]
        await bot.send_message(f"@{target}", info_text)
        for photo_id in photos:
            await bot.send_photo(f"@{target}", photo=photo_id)
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–ª—ñ—î–Ω—Ç—É!")
    else:
        await callback.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —î Telegram-—é–∑–µ—Ä–Ω–µ–π–º–æ–º.", show_alert=True)

# –ü–µ—Ä–µ–≥–ª—è–¥ –∞—Ä—Ö—ñ–≤—É –ø—Ä–æ–≥—Ä–µ—Å—É
@router.callback_query(lambda c: c.data.startswith("view_archive_"))
async def view_archive(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    archive = user_clients[name].get("progress_archive", [])
    if not archive:
        await callback.message.edit_text(f"üìú –ê—Ä—Ö—ñ–≤ –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è {name} –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    archive_text = f"üìú –ê—Ä—Ö—ñ–≤ –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è {name}:\n"
    for idx, entry in enumerate(archive, 1):
        photos = "\n".join([f"üì∑ {photo}" for photo in entry.get("photos", [])[:3]]) or "–ù–µ–º–∞—î —Å–≤—ñ—Ç–ª–∏–Ω"
        archive_text += (
            f"\n--- –ó–∞–ø–∏—Å {idx} ---\n"
            f"–î–∞—Ç–∞: {entry['date']}\n"
            f"–í–∞–≥–∞: {entry.get('weight', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í—ñ–∫: {entry.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—ñ–ª–∞: {entry.get('body_params', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {entry.get('extra_info', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°–≤—ñ—Ç–ª–∏–Ω–∏: {photos}"
        )
    await callback.message.edit_text(archive_text)
    await callback.answer()

# –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
@router.callback_query(lambda c: c.data.startswith("analyze_results_"))
async def analyze_results(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    client = user_clients[name]
    profile = client.get("profile", {})
    archive = client.get("progress_archive", [])

    all_data = archive + [profile] if profile else archive
    if not all_data or len(all_data) < 1:
        await callback.message.edit_text(f"üìä –î–ª—è {name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        return

    all_data.sort(key=lambda x: x.get("date", "1970-01-01"))
    first_entry = all_data[0]
    last_entry = all_data[-1]

    first_weight = float(re.search(r"(\d+\.?\d*)", first_entry.get("weight", "0")).group(1)) if "kg" in first_entry.get("weight", "") else 0
    last_weight = float(re.search(r"(\d+\.?\d*)", last_entry.get("weight", "0")).group(1)) if "kg" in last_entry.get("weight", "") else 0
    weight_change = last_weight - first_weight
    weight_trend = "—Å—Ö—É–¥" if weight_change < 0 else "–Ω–∞–±—Ä–∞–≤" if weight_change > 0 else "–Ω–µ –∑–º—ñ–Ω–∏–≤"

    first_params = parse_body_params(first_entry.get("body_params", ""))
    last_params = parse_body_params(last_entry.get("body_params", ""))
    body_changes = {}
    for key in set(first_params.keys()).union(last_params.keys()):
        change = last_params.get(key, 0) - first_params.get(key, 0)
        if change != 0:
            trend = "–∑–±—ñ–ª—å—à–∏–≤—Å—è" if change > 0 else "–∑–º–µ–Ω—à–∏–≤—Å—è"
            body_changes[key] = f"{abs(change):.1f} —Å–º ({trend})"

    analysis_text = f"üìä –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è {name}:\n"
    analysis_text += f"- –ü–µ—Ä—ñ–æ–¥: {first_entry['date']} ‚Äì {last_entry['date']}\n"
    analysis_text += f"- –ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {abs(weight_change):.1f} –∫–≥ ({weight_trend})\n"
    if body_changes:
        analysis_text += "- –ó–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç—ñ–ª–∞:\n"
        for part, change in body_changes.items():
            analysis_text += f"  - {part}: {change}\n"
    else:
        analysis_text += "- –ó–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç—ñ–ª–∞: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö\n"
    analysis_text += "–ü—Ä–∏–º—ñ—Ç–∫–∞: –ê–Ω–∞–ª—ñ–∑ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—à–∏—Ö —ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å–∞—Ö."

    await callback.message.edit_text(analysis_text)
    await callback.answer()

# –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤—Ä—É—á–Ω—É
@router.callback_query(lambda c: c.data.startswith("set_trainings_"))
async def set_trainings(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    _, _, name = callback.data.split("_", 2)
    user_clients = clients.get(str(user_id), {})
    if name not in user_clients:
        await callback.answer("–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    await state.update_data(user_id=user_id, name=name)
    await state.set_state(SetTrainings.new_trainings)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {name} (—á–∏—Å–ª–æ):", reply_markup=None)
    await callback.answer()

@router.message(SetTrainings.new_trainings)
async def process_new_trainings(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    name = data["name"]
    user_clients = clients.get(str(user_id), {})
    try:
        new_trainings = int(message.text)
        if new_trainings < 0:
            raise ValueError
        user_clients[name]["trainings"] = new_trainings
        save_clients()
        await message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_trainings}.")
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!")
    await state.clear()

# –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞
@router.message(lambda message: message.text == "–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è —ñ–Ω—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞/—é–∑–µ—Ä–∞")
async def manage_access(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ë–æ–≥–¥–∞–Ω–∞.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞", callback_data="free_access")],
        [InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞", callback_data="paid_access")],
        [InlineKeyboardButton(text="–ü—Ä–∏–±—Ä–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="remove_access")]
    ])
    await message.answer("–û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=keyboard)
    await state.set_state(ManageAccess.access_type)

@router.callback_query(ManageAccess.access_type)
async def process_access_type(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in ALLOWED_USERS:  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω
        await callback.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó!", show_alert=True)
        return
    access_type = callback.data
    await state.update_data(access_type=access_type)
    await state.set_state(ManageAccess.user_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏ ID, —é–∑–µ—Ä–Ω–µ–π–º (@username) –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É:")
    await callback.answer()

@router.message(ManageAccess.user_id)
async def process_user_id(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS:  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        await state.clear()
        return
    target_id = message.text.replace("@", "")  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ @, —è–∫—â–æ —î
    try:
        target_id = int(target_id) if target_id.isdigit() else target_id
    except ValueError:
        pass  # –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ —î, —è–∫—â–æ –Ω–µ —á–∏—Å–ª–æ
    data = await state.get_data()
    access_type = data["access_type"]

    if access_type in ["free_access", "paid_access"]:
        if target_id not in members:
            members[target_id] = {"chat_id": None, "interacted": True, "role": "trainer"}
            save_members()
            await message.answer(f"–î–æ—Å—Ç—É–ø {access_type.replace('_', ' ')} –Ω–∞–¥–∞–Ω–æ –¥–ª—è {target_id}!")
        else:
            members[target_id]["role"] = "trainer"
            save_members()
            await message.answer(f"–î–æ—Å—Ç—É–ø {access_type.replace('_', ' ')} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {target_id}!")
        if access_type == "paid_access":
            await message.answer("–ü–ª–∞—Ç–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞. (–ü—Ä–∏–º—ñ—Ç–∫–∞: –ª–æ–≥—ñ–∫–∞ —Å–ø–ª–∞—Ç–∏ —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –¥–æ–¥–∞–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –∑–∞ –ø–æ—Ç—Ä–µ–±–∏.)")
    elif access_type == "remove_access":
        if target_id in members and members[target_id].get("role") == "trainer":
            del members[target_id]["role"]
            if not members[target_id].get("interacted", False):
                del members[target_id]
            save_members()
            await message.answer(f"–î–æ—Å—Ç—É–ø –ø—Ä–∏–±—Ä–∞–Ω–æ –¥–ª—è {target_id}!")
        else:
            await message.answer(f"–£ {target_id} –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –∞–±–æ –≤—ñ–Ω –Ω–µ —î —Ç—Ä–µ–Ω–µ—Ä–æ–º.")

    await state.clear()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(Command("stats"))
async def show_stats(message: Message):
    user_id = message.from_user.id
    if user_id not in ALLOWED_USERS and (user_id not in members or members[user_id].get("role") != "trainer"):
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ë–æ–≥–¥–∞–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É.")
        return
    user_clients = clients.get(str(user_id), {})
    if not user_clients:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    total_clients = len(user_clients)
    total_trainings = sum(client["trainings"] for client in user_clients.values())
    average_trainings = total_trainings / total_clients if total_clients > 0 else 0
    stats_text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_clients}\n"
        f"- –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {average_trainings:.2f}"
    )
    await message.answer(stats_text)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("add_user"))
async def add_allowed_user(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    try:
        new_user_id = int(message.text.split()[1])
        ALLOWED_USERS.add(new_user_id)
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {new_user_id} –æ—Ç—Ä–∏–º–∞–≤ –¥–æ—Å—Ç—É–ø.")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /add_user <user_id>")

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.message(Command("remove_user"))
async def remove_allowed_user(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    try:
        remove_user_id = int(message.text.split()[1])
        if remove_user_id in ALLOWED_USERS and remove_user_id != ADMIN_ID:
            ALLOWED_USERS.remove(remove_user_id)
            await message.answer(f"–î–æ—Å—Ç—É–ø –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {remove_user_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –∞–±–æ —Ü–µ —Ç–∏ (–∞–¥–º—ñ–Ω).")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /remove_user <user_id>")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())