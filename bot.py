import json
import os
import asyncio
import logging
import sys
import requests
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn
from fastapi import FastAPI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = "8097225217:AAERSuN5K68msP6JZzpSG9NR7XiDTeXBH6Y"
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
ALLOWED_USERS = [385298897, 666567798]

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_PATH = "/data/data.json"
MEMBERS_PATH = "/data/members.json"

# –ö–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—ñ–≤
class ClientStates(StatesGroup):
    add_client_name = State()
    add_client_trainings = State()
    add_client_contact = State()
    delete_client = State()
    change_trainings = State()
    change_trainings_count = State()
    client_info_age = State()
    client_info_weight = State()
    client_info_results = State()
    client_info_additional = State()
    confirm_notification = State()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def load_data():
    try:
        with open(DATA_PATH, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_PATH, "w") as f:
        json.dump(data, f, indent=4)

def load_members():
    try:
        with open(MEMBERS_PATH, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_member(user_id, member_data):
    members = load_members()
    members[user_id] = member_data
    with open(MEMBERS_PATH, "w") as f:
        json.dump(members, f, indent=4)

def load_clients(user_id):
    data = load_data()
    return data.get(str(user_id), {})

def save_client(user_id, client_name, client_data):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {}
    data[str(user_id)][client_name] = client_data
    save_data(data)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    chat_id = message.chat.id

    print(f"User ID: {user_id}, Chat ID: {chat_id}, Username: {username}")
    members = load_members()
    if user_id in ALLOWED_USERS:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
                [KeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="üìù–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å")],
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ñ—Ç–∞—é, –ë–æ–≥–¥–∞–Ω–µ! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=keyboard)
        if user_id not in members:
            members[user_id] = {"chat_id": chat_id, "interacted": True, "role": "admin"}
            save_member(user_id, members[user_id])
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫ "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"
@router.message(F.text == "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
async def add_client(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:")
    await state.set_state(ClientStates.add_client_name)

@router.message(StateFilter(ClientStates.add_client_name))
async def process_client_name(message: Message, state: FSMContext):
    client_name = message.text.strip()
    await state.update_data(client_name=client_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:")
    await state.set_state(ClientStates.add_client_trainings)

@router.message(StateFilter(ClientStates.add_client_trainings))
async def process_client_trainings(message: Message, state: FSMContext):
    try:
        trainings = int(message.text.strip())
        await state.update_data(trainings=trainings)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞ (—é–∑–µ—Ä–Ω–µ–π–º Telegram –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É):")
        await state.set_state(ClientStates.add_client_contact)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")

@router.message(StateFilter(ClientStates.add_client_contact))
async def process_client_contact(message: Message, state: FSMContext):
    contact = message.text.strip()
    data = await state.get_data()
    client_name = data["client_name"]
    trainings = data["trainings"]
    user_id = message.from_user.id

    user_clients = load_clients(user_id)
    user_clients[client_name] = {
        "trainings": trainings,
        "contact": contact,
        "profile": {"age": "", "weight": "", "results": "", "additional": ""},
        "archive": []
    }
    save_client(user_id, client_name, user_clients[client_name])
    await message.answer(f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –¥–æ–¥–∞–Ω–æ! –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {trainings}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact}")
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤"
@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
async def view_clients(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if not user_clients:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for client_name, client_data in user_clients.items():
        response += f"{client_name} | –¢—Ä–µ–Ω—É–≤–∞–Ω—å: {client_data['trainings']}\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{client_name}"),
            InlineKeyboardButton(text=f"{client_data['trainings']}", callback_data="noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{client_name}"),
            InlineKeyboardButton(text="üóë", callback_data=f"delete_{client_name}"),
            InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{client_name}")
        ])
    await message.answer(response, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ "‚¨ÖÔ∏è" —ñ "‚û°Ô∏è"
@router.callback_query(F.data.startswith("minus_"))
async def minus_training(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        user_clients[client_name]["trainings"] -= 1
        change = -1
        new_trainings = user_clients[client_name]["trainings"]
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            await state.update_data(client_name=client_name, message_text=msg, change=change, new_trainings=new_trainings)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_notification")]
            ])
            await callback.message.answer(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {client_name}:\n{msg}", reply_markup=keyboard)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            response += f"{name} | –¢—Ä–µ–Ω—É–≤–∞–Ω—å: {data['trainings']}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{data['trainings']}", callback_data="noop"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("plus_"))
async def plus_training(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        user_clients[client_name]["trainings"] += 1
        change = 1
        new_trainings = user_clients[client_name]["trainings"]
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            await state.update_data(client_name=client_name, message_text=msg, change=change, new_trainings=new_trainings)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_notification")]
            ])
            await callback.message.answer(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {client_name}:\n{msg}", reply_markup=keyboard)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            response += f"{name} | –¢—Ä–µ–Ω—É–≤–∞–Ω—å: {data['trainings']}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{data['trainings']}", callback_data="noop"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.callback_query(F.data == "send_notification")
async def send_notification(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    client_name = data["client_name"]
    message_text = data["message_text"]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    contact = user_clients[client_name]["contact"]

    if contact and contact.startswith("@"):
        try:
            chat = await bot.get_chat(contact)
            await bot.send_message(chat.id, message_text)
            await callback.message.edit_text(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {client_name} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            await callback.message.edit_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É: {e}")
    else:
        await callback.message.edit_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.")
    await state.clear()
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üóë"
@router.callback_query(F.data.startswith("delete_"))
async def delete_client_inline(callback: types.CallbackQuery):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        del user_clients[client_name]
        data = load_data()
        data[str(user_id)] = user_clients
        save_data(data)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            response += f"{name} | –¢—Ä–µ–Ω—É–≤–∞–Ω—å: {data['trainings']}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{data['trainings']}", callback_data="noop"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.message.answer(f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è"
@router.callback_query(F.data.startswith("info_"))
async def client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        await state.update_data(client_name=client_name)
        await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}:")
        await state.set_state(ClientStates.client_info_age)
    await callback.answer()

@router.message(StateFilter(ClientStates.client_info_age))
async def process_client_info_age(message: Message, state: FSMContext):
    age = message.text.strip()
    await state.update_data(age=age)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –∫–ª—ñ—î–Ω—Ç–∞ (–∫–≥):")
    await state.set_state(ClientStates.client_info_weight)

@router.message(StateFilter(ClientStates.client_info_weight))
async def process_client_info_weight(message: Message, state: FSMContext):
    weight = message.text.strip()
    await state.update_data(weight=weight)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ–≥—Ä–µ—Å —É –≤–ø—Ä–∞–≤–∞—Ö):")
    await state.set_state(ClientStates.client_info_results)

@router.message(StateFilter(ClientStates.client_info_results))
async def process_client_info_results(message: Message, state: FSMContext):
    results = message.text.strip()
    await state.update_data(results=results)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—è–∫—â–æ —î):")
    await state.set_state(ClientStates.client_info_additional)

@router.message(StateFilter(ClientStates.client_info_additional))
async def process_client_info_additional(message: Message, state: FSMContext):
    additional = message.text.strip()
    data = await state.get_data()
    client_name = data["client_name"]
    user_id = message.from_user.id
    user_clients = load_clients(user_id)

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–ª—ñ—î–Ω—Ç–∞
    profile = {
        "age": data["age"],
        "weight": data["weight"],
        "results": data["results"],
        "additional": additional
    }
    user_clients[client_name]["profile"] = profile

    # –î–æ–¥–∞—î–º–æ –¥–æ –∞—Ä—Ö—ñ–≤—É
    user_clients[client_name]["archive"].append({
        "timestamp": message.date.isoformat(),
        "profile": profile
    })

    # –ê–Ω–∞–ª—ñ–∑ (–∑–º—ñ–Ω–∞ –≤–∞–≥–∏)
    analysis = ""
    if len(user_clients[client_name]["archive"]) > 1:
        old_weight = float(user_clients[client_name]["archive"][-2]["profile"]["weight"])
        new_weight = float(profile["weight"])
        weight_change = new_weight - old_weight
        analysis = f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:+.1f} –∫–≥\n"

    save_client(user_id, client_name, user_clients[client_name])

    # –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω–∫–µ—Ç—É
    response = f"–ê–Ω–∫–µ—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}:\n"
    response += f"–í—ñ–∫: {profile['age']}\n"
    response += f"–í–∞–≥–∞: {profile['weight']} –∫–≥\n"
    response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {profile['results']}\n"
    response += f"–î–æ–¥–∞—Ç–∫–æ–≤–æ: {profile['additional']}\n"
    response += analysis
    await message.answer(response)
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"
@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
async def delete_client(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if not user_clients:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    response = "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n"
    for client_name in user_clients.keys():
        response += f"- {client_name}\n"
    await message.answer(response)
    await state.set_state(ClientStates.delete_client)

@router.message(StateFilter(ClientStates.delete_client))
async def process_delete_client(message: Message, state: FSMContext):
    client_name = message.text.strip()
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        del user_clients[client_name]
        data = load_data()
        data[str(user_id)] = user_clients
        save_data(data)
        await message.answer(f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ "üìù–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"
@router.message(F.text == "üìù–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å")
async def change_trainings(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if not user_clients:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    response = "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:\n"
    for client_name in user_clients.keys():
        response += f"- {client_name}\n"
    await message.answer(response)
    await state.set_state(ClientStates.change_trainings)

@router.message(StateFilter(ClientStates.change_trainings))
async def process_change_trainings(message: Message, state: FSMContext):
    client_name = message.text.strip()
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if client_name not in user_clients:
        await message.answer("–¢–∞–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(client_name=client_name)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {client_name} (–ø–æ—Ç–æ—á–Ω–∞: {user_clients[client_name]['trainings']}):")
    await state.set_state(ClientStates.change_trainings_count)

@router.message(StateFilter(ClientStates.change_trainings_count))
async def process_change_trainings_count(message: Message, state: FSMContext):
    try:
        new_trainings = int(message.text.strip())
        data = await state.get_data()
        client_name = data["client_name"]
        user_id = message.from_user.id
        user_clients = load_clients(user_id)

        old_trainings = user_clients[client_name]["trainings"]
        user_clients[client_name]["trainings"] = new_trainings
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            change = new_trainings - old_trainings
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            await state.update_data(client_name=client_name, message_text=msg, change=change, new_trainings=new_trainings)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_notification")]
            ])
            await message.answer(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {client_name}:\n{msg}", reply_markup=keyboard)

        await message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {client_name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_trainings}.")
        await state.clear()
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /update
@router.message(Command("update"))
async def update_bot(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return

    await message.answer("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥ —ñ–∑ GitHub
    url = "https://raw.githubusercontent.com/bohdan123/telegram-bot-code/main/bot.py"
    try:
        response = requests.get(url)
        if response.status_code != 200:
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–¥—É: {response.status_code} {response.reason}")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥
        with open("/app/bot.py", "w") as f:
            f.write(response.text)

        await message.answer("–ö–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {e}")

# FastAPI –µ–Ω–¥–ø–æ—ñ–Ω—Ç
@app.get("/")
async def root():
    return {"message": "Bot is running"}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞...")
    dp.include_router(router)
    try:
        print("–í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫...")
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ polling —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
    polling_task = asyncio.create_task(dp.start_polling(bot))
    print("Polling –∑–∞–ø—É—â–µ–Ω–æ.")

    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI-—Å–µ—Ä–≤–µ—Ä...")
    config = uvicorn.Config(app, host="0.0.0.0", port=8080, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

    await polling_task

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
