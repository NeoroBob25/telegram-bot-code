@router.message(StateFilter(ClientStates.track_client_select))
async def process_track_client_select(message: types.Message, state: FSMContext):
    client_name = message.text.strip()
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if client_name not in user_clients:
        response = "–¢–∞–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        print(f"[PROCESS_TRACK_CLIENT_SELECT] Sending response: {response}")
        await message.answer(response)
        print(f"[PROCESS_TRACK_CLIENT_SELECT] Response sent successfully to User ID: {user_id}")
        await state.clear()
        return

    profiles = user_clients[client_name].get("profiles", [])
    if not profiles:
        response = f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ {client_name} –Ω–µ–º–∞—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."
        print(f"[PROCESS_TRACK_CLIENT_SELECT] Sending response: {response}")
        await message.answer(response)
        print(f"[PROCESS_TRACK_CLIENT_SELECT] Response sent successfully to User ID: {user_id}")
        await state.clear()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ client_name —É —Å—Ç–∞–Ω—ñ (–ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
    await state.update_data(client_name=client_name)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–Ω–∫–µ—Ç–∏ –ø–æ –æ–¥–Ω—ñ–π
    for idx, profile in enumerate(profiles):
        response = f"üìä –ü–æ–∫–∞–∑–Ω–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ {client_name} (–ê–Ω–∫–µ—Ç–∞ ‚Ññ{idx + 1}):\n\n"
        response += f"üìÖ –î–∞—Ç–∞: {profile['date']}\n"
        response += f"–í—ñ–∫: {profile['age']}\n"
        response += f"–í–∞–≥–∞: {profile['weight']} –∫–≥\n"
        response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {profile['results']}\n"
        response += f"–î–æ–¥–∞—Ç–∫–æ–≤–æ: {profile['additional']}\n\n"

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É —è–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É callback_data
        profile_date = profile['date']
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_info_{client_name}_{profile_date}"),
                InlineKeyboardButton(text=f"–í–∏–¥–∞–ª–∏—Ç–∏ ‚Ññ{idx + 1}", callback_data=f"delete_info_{client_name}_{profile_date}")
            ]
        ])

        print(f"[PROCESS_TRACK_CLIENT_SELECT] Sending profile {idx + 1}: {response}")
        await message.answer(response, reply_markup=keyboard)
        print(f"[PROCESS_TRACK_CLIENT_SELECT] Profile {idx + 1} sent successfully to User ID: {user_id}")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–∫—Ä–µ–º–æ
    one_week_ago = datetime.now().date() - timedelta(days=7)
    recent_profiles_week = [p for p in profiles if datetime.strptime(p["date"], "%Y-%m-%d").date() >= one_week_ago]
    one_month_ago = datetime.now().date() - timedelta(days=30)
    recent_profiles_month = [p for p in profiles if datetime.strptime(p["date"], "%Y-%m-%d").date() >= one_month_ago]

    response = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {client_name}:\n\n"
    
    if recent_profiles_week:
        response += "–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:\n"
        if len(recent_profiles_week) > 1:
            first_week = recent_profiles_week[0]
            last_week = recent_profiles_week[-1]
            try:
                weight_change_week = float(last_week["weight"]) - float(first_week["weight"])
                response += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change_week:+.1f} –∫–≥\n"
            except (ValueError, TypeError):
                response += "–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n"
            response += f"–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {last_week['results']}\n"
        else:
            response += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"
    else:
        response += "–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î.\n"

    if recent_profiles_month:
        response += "\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:\n"
        if len(recent_profiles_month) > 1:
            first_month = recent_profiles_month[0]
            last_month = recent_profiles_month[-1]
            try:
                weight_change_month = float(last_month["weight"]) - float(first_month["weight"])
                response += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change_month:+.1f} –∫–≥\n"
            except (ValueError, TypeError):
                response += "–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n"
            response += f"–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {last_month['results']}\n"
        else:
            response += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ –º—ñ—Å—è—Ü—å.\n"
    else:
        response += "\n–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î.\n"

    print(f"[PROCESS_TRACK_CLIENT_SELECT] Sending statistics: {response}")
    await message.answer(response)
    print(f"[PROCESS_TRACK_CLIENT_SELECT] Statistics sent successfully to User ID: {user_id}")
    await state.clear()

@router.callback_query(F.data.startswith("delete_info_"))
async def delete_client_info(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ callback_data: delete_info_{client_name}_{profile_date}
        parts = callback.data.split("_")
        if len(parts) != 4:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data")
        client_name = parts[2]
        profile_date = parts[3]
    except Exception as e:
        response = f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {e}"
        print(f"[DELETE_CLIENT_INFO] Error: {response}")
        await callback.message.answer(response)
        await callback.answer()
        return

    user_id = callback.from_user.id
    user_clients = load_clients(user_id)

    print(f"[DELETE_CLIENT_INFO] Attempting to delete profile for client: {client_name}, date: {profile_date}")

    if client_name not in user_clients:
        response = f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        print(f"[DELETE_CLIENT_INFO] Error: {response}")
        await callback.message.answer(response)
        await callback.answer()
        return

    profiles = user_clients[client_name].get("profiles", [])
    profile_to_delete = None
    for profile in profiles:
        if profile["date"] == profile_date:
            profile_to_delete = profile
            break

    if not profile_to_delete:
        response = f"–ê–Ω–∫–µ—Ç—É –¥–ª—è {client_name} –∑–∞ {profile_date} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        print(f"[DELETE_CLIENT_INFO] Error: {response}")
        await callback.message.answer(response)
        await callback.answer()
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    user_clients[client_name]["profiles"] = [p for p in profiles if p["date"] != profile_date]
    save_client(user_id, client_name, user_clients[client_name])

    response = f"–î–∞–Ω—ñ –¥–ª—è {client_name} –∑–∞ {profile_date} –≤–∏–¥–∞–ª–µ–Ω–æ!"
    print(f"[DELETE_CLIENT_INFO] Sending response: {response}")
    await callback.message.answer(response)
    print(f"[DELETE_CLIENT_INFO] Response sent successfully to User ID: {user_id}")
    await callback.answer()
