import json
import os
import asyncio
import logging
import sys
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn
from fastapi import FastAPI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = "8097225217:AAERSuN5K68msP6JZzpSG9NR7XiDTeXBH6Y"
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
ALLOWED_USERS = [385298897, 666567798]

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_PATH = "/data/data.json"
MEMBERS_PATH = "/data/members.json"

# –ö–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—ñ–≤
class ClientStates(StatesGroup):
    add_client_name = State()
    add_client_trainings = State()
    add_client_contact = State()
    change_trainings_count = State()
    client_info_age = State()
    client_info_weight = State()
    client_info_results = State()
    client_info_additional = State()
    edit_client_info_age = State()
    edit_client_info_weight = State()
    edit_client_info_results = State()
    edit_client_info_additional = State()
    select_client_for_tracking = State()
    select_date_for_edit = State()
    select_date_for_delete = State()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def load_data():
    try:
        with open(DATA_PATH, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_PATH, "w") as f:
        json.dump(data, f, indent=4)

def load_members():
    try:
        with open(MEMBERS_PATH, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_member(user_id, member_data):
    members = load_members()
    members[user_id] = member_data
    with open(MEMBERS_PATH, "w") as f:
        json.dump(members, f, indent=4)

def load_clients(user_id):
    data = load_data()
    return data.get(str(user_id), {})

def save_client(user_id, client_name, client_data):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {}
    data[str(user_id)][client_name] = client_data
    save_data(data)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    chat_id = message.chat.id

    print(f"[START] User ID: {user_id}, Chat ID: {chat_id}, Username: {username}")
    members = load_members()
    if user_id in ALLOWED_USERS:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")],
                [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
                [KeyboardButton(text="üìà –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤")],
            ],
            resize_keyboard=True
        )
        response = "–í—ñ—Ç–∞—é, –ë–æ–≥–¥–∞–Ω–µ! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"
        print(f"[START] Sending response: {response}")
        await message.answer(response, reply_markup=keyboard)
        if user_id not in members:
            members[user_id] = {"chat_id": chat_id, "interacted": True, "role": "admin"}
            save_member(user_id, members[user_id])
    else:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞."
        print(f"[START] Sending response: {response}")
        await message.answer(response)

# –û–±—Ä–æ–±–Ω–∏–∫ "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"
@router.message(F.text == "–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
async def add_client(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
        print(f"[ADD_CLIENT] Sending response: {response}")
        await message.answer(response)
        return
    response = "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞:"
    print(f"[ADD_CLIENT] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.add_client_name)

@router.message(StateFilter(ClientStates.add_client_name))
async def process_client_name(message: Message, state: FSMContext):
    client_name = message.text.strip()
    await state.update_data(client_name=client_name)
    response = "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:"
    print(f"[PROCESS_CLIENT_NAME] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.add_client_trainings)

@router.message(StateFilter(ClientStates.add_client_trainings))
async def process_client_trainings(message: Message, state: FSMContext):
    try:
        trainings = int(message.text.strip())
        await state.update_data(trainings=trainings)
        response = "–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞ (—é–∑–µ—Ä–Ω–µ–π–º Telegram –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É):"
        print(f"[PROCESS_CLIENT_TRAININGS] Sending response: {response}")
        await message.answer(response)
        await state.set_state(ClientStates.add_client_contact)
    except ValueError:
        response = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å."
        print(f"[PROCESS_CLIENT_TRAININGS] Sending response: {response}")
        await message.answer(response)

@router.message(StateFilter(ClientStates.add_client_contact))
async def process_client_contact(message: Message, state: FSMContext):
    contact = message.text.strip()
    data = await state.get_data()
    client_name = data["client_name"]
    trainings = data["trainings"]
    user_id = message.from_user.id

    user_clients = load_clients(user_id)
    user_clients[client_name] = {
        "trainings": trainings,
        "contact": contact,
        "profile": {"age": "", "weight": "", "results": "", "additional": ""},
        "archive": []
    }
    save_client(user_id, client_name, user_clients[client_name])
    response = f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –¥–æ–¥–∞–Ω–æ! –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {trainings}, –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    print(f"[PROCESS_CLIENT_CONTACT] Sending response: {response}")
    await message.answer(response)
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤"
@router.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
async def view_clients(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
        print(f"[VIEW_CLIENTS] Sending response: {response}")
        await message.answer(response)
        return
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if not user_clients:
        response = "–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        print(f"[VIEW_CLIENTS] Sending response: {response}")
        await message.answer(response)
        return

    response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for client_name, client_data in user_clients.items():
        contact = client_data["contact"]
        if contact.startswith("@"):
            contact = f"[{contact}](tg://user?id={contact})"
        else:
            contact = f"üìû {contact}"
        response += f"üë§ {client_name} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {client_data['trainings']} | {contact}\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{client_name}"),
            InlineKeyboardButton(text=f"{client_name}: {client_data['trainings']} üìù", callback_data=f"change_{client_name}"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{client_name}"),
            InlineKeyboardButton(text="üóë", callback_data=f"delete_{client_name}"),
            InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{client_name}")
        ])
    print(f"[VIEW_CLIENTS] Sending response: {response}")
    await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ "‚¨ÖÔ∏è" —ñ "‚û°Ô∏è"
@router.callback_query(F.data.startswith("minus_"))
async def minus_training(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        user_clients[client_name]["trainings"] -= 1
        change = -1
        new_trainings = user_clients[client_name]["trainings"]
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            if contact.startswith("@"):
                clean_contact = contact.lstrip("@")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É", url=f"https://t.me/{clean_contact}?text={msg}")]
                ])
                response = f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{msg}"
                print(f"[MINUS_TRAINING] Sending response: {response}")
                await callback.message.answer(response, reply_markup=keyboard)
            else:
                response = f"–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–ª—ñ—î–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç {contact}:\n{msg}"
                print(f"[MINUS_TRAINING] Sending response: {response}")
                await callback.message.answer(response)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            contact = data["contact"]
            if contact.startswith("@"):
                contact = f"[{contact}](tg://user?id={contact})"
            else:
                contact = f"üìû {contact}"
            response += f"üë§ {name} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {data['trainings']} | {contact}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{name}: {data['trainings']} üìù", callback_data=f"change_{name}"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        print(f"[MINUS_TRAINING] Updating table: {response}")
        await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data.startswith("plus_"))
async def plus_training(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        user_clients[client_name]["trainings"] += 1
        change = 1
        new_trainings = user_clients[client_name]["trainings"]
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            if contact.startswith("@"):
                clean_contact = contact.lstrip("@")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É", url=f"https://t.me/{clean_contact}?text={msg}")]
                ])
                response = f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{msg}"
                print(f"[PLUS_TRAINING] Sending response: {response}")
                await callback.message.answer(response, reply_markup=keyboard)
            else:
                response = f"–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–ª—ñ—î–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç {contact}:\n{msg}"
                print(f"[PLUS_TRAINING] Sending response: {response}")
                await callback.message.answer(response)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            contact = data["contact"]
            if contact.startswith("@"):
                contact = f"[{contact}](tg://user?id={contact})"
            else:
                contact = f"üìû {contact}"
            response += f"üë§ {name} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {data['trainings']} | {contact}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{name}: {data['trainings']} üìù", callback_data=f"change_{name}"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        print(f"[PLUS_TRAINING] Updating table: {response}")
        await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù" —É —Ç–∞–±–ª–∏—Ü—ñ
@router.callback_query(F.data.startswith("change_"))
async def change_training_inline(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        await state.update_data(client_name=client_name)
        response = f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {client_name} (–ø–æ—Ç–æ—á–Ω–∞: {user_clients[client_name]['trainings']}):"
        print(f"[CHANGE_TRAINING_INLINE] Sending response: {response}")
        await callback.message.answer(response)
        await state.set_state(ClientStates.change_trainings_count)
    await callback.answer()

@router.message(StateFilter(ClientStates.change_trainings_count))
async def process_change_trainings_count(message: Message, state: FSMContext):
    try:
        new_trainings = int(message.text.strip())
        data = await state.get_data()
        client_name = data["client_name"]
        user_id = message.from_user.id
        user_clients = load_clients(user_id)

        old_trainings = user_clients[client_name]["trainings"]
        user_clients[client_name]["trainings"] = new_trainings
        save_client(user_id, client_name, user_clients[client_name])

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        contact = user_clients[client_name]["contact"]
        if contact:
            change = new_trainings - old_trainings
            msg = f"–¢–≤—ñ–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª—è—î: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤–æ—ó—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ: {change:+d}. –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {new_trainings} ‚úÖ"
            if contact.startswith("@"):
                clean_contact = contact.lstrip("@")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É", url=f"https://t.me/{clean_contact}?text={msg}")]
                ])
                response = f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{msg}"
                print(f"[PROCESS_CHANGE_TRAININGS_COUNT] Sending response: {response}")
                await message.answer(response, reply_markup=keyboard)
            else:
                response = f"–°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–ª—ñ—î–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç {contact}:\n{msg}"
                print(f"[PROCESS_CHANGE_TRAININGS_COUNT] Sending response: {response}")
                await message.answer(response)

        response = f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è {client_name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_trainings}."
        print(f"[PROCESS_CHANGE_TRAININGS_COUNT] Sending response: {response}")
        await message.answer(response)
        await state.clear()
    except ValueError:
        response = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å."
        print(f"[PROCESS_CHANGE_TRAININGS_COUNT] Sending response: {response}")
        await message.answer(response)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üóë"
@router.callback_query(F.data.startswith("delete_"))
async def delete_client_inline(callback: types.CallbackQuery):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        del user_clients[client_name]
        data = load_data()
        data[str(user_id)] = user_clients
        save_data(data)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        response = "–°–ø–∏—Å–æ–∫ —Ç–≤–æ—ó—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for name, data in user_clients.items():
            contact = data["contact"]
            if contact.startswith("@"):
                contact = f"[{contact}](tg://user?id={contact})"
            else:
                contact = f"üìû {contact}"
            response += f"üë§ {name} | üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {data['trainings']} | {contact}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"minus_{name}"),
                InlineKeyboardButton(text=f"{name}: {data['trainings']} üìù", callback_data=f"change_{name}"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"plus_{name}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{name}"),
                InlineKeyboardButton(text="‚ÑπÔ∏è", callback_data=f"info_{name}")
            ])
        print(f"[DELETE_CLIENT] Updating table: {response}")
        await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
        response = f"–ö–ª—ñ—î–Ω—Ç–∞ {client_name} –≤–∏–¥–∞–ª–µ–Ω–æ!"
        print(f"[DELETE_CLIENT] Sending response: {response}")
        await callback.message.answer(response)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è"
@router.callback_query(F.data.startswith("info_"))
async def client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        await state.update_data(client_name=client_name)
        response = f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}:"
        print(f"[CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
        await state.set_state(ClientStates.client_info_age)
    await callback.answer()

@router.message(StateFilter(ClientStates.client_info_age))
async def process_client_info_age(message: Message, state: FSMContext):
    age = message.text.strip()
    await state.update_data(age=age)
    response = "–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É –∫–ª—ñ—î–Ω—Ç–∞ (–∫–≥):"
    print(f"[PROCESS_CLIENT_INFO_AGE] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.client_info_weight)

@router.message(StateFilter(ClientStates.client_info_weight))
async def process_client_info_weight(message: Message, state: FSMContext):
    weight = message.text.strip()
    await state.update_data(weight=weight)
    response = "–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ–≥—Ä–µ—Å —É –≤–ø—Ä–∞–≤–∞—Ö):"
    print(f"[PROCESS_CLIENT_INFO_WEIGHT] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.client_info_results)

@router.message(StateFilter(ClientStates.client_info_results))
async def process_client_info_results(message: Message, state: FSMContext):
    results = message.text.strip()
    await state.update_data(results=results)
    response = "–í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—è–∫—â–æ —î):"
    print(f"[PROCESS_CLIENT_INFO_RESULTS] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.client_info_additional)

@router.message(StateFilter(ClientStates.client_info_additional))
async def process_client_info_additional(message: Message, state: FSMContext):
    additional = message.text.strip()
    data = await state.get_data()
    client_name = data["client_name"]
    user_id = message.from_user.id
    user_clients = load_clients(user_id)

    # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    profile = {
        "age": data["age"],
        "weight": data["weight"],
        "results": data["results"],
        "additional": additional
    }
    await state.update_data(temp_profile=profile)

    # –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω–∫–µ—Ç—É —Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π
    response = f"–ê–Ω–∫–µ—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}:\n"
    response += f"–í—ñ–∫: {profile['age']}\n"
    response += f"–í–∞–≥–∞: {profile['weight']} –∫–≥\n"
    response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {profile['results']}\n"
    response += f"–î–æ–¥–∞—Ç–∫–æ–≤–æ: {profile['additional']}\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data=f"save_info_{client_name}")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_info_{client_name}")],
        [InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_info_{client_name}")],
        [InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data=f"add_new_info_{client_name}")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data=f"analyze_info_{client_name}")]
    ])
    print(f"[PROCESS_CLIENT_INFO_ADDITIONAL] Sending response: {response}")
    await message.answer(response, reply_markup=keyboard)
    # –ù–µ –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ temp_profile –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏"
@router.callback_query(F.data.startswith("save_info_"))
async def save_client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    data = await state.get_data()
    profile = data.get("temp_profile")

    if client_name in user_clients and profile:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
        current_date = datetime.now().strftime("%Y-%m-%d")
        user_clients[client_name]["archive"].append({
            "date": current_date,
            "profile": profile
        })
        save_client(user_id, client_name, user_clients[client_name])
        response = f"–î–∞–Ω—ñ –¥–ª—è {client_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑–∞ {current_date}!"
        print(f"[SAVE_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
    await state.clear()
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
@router.callback_query(F.data.startswith("edit_info_"))
async def edit_client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    
    if client_name in user_clients and user_clients[client_name]["archive"]:
        await state.update_data(client_name=client_name)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for entry in user_clients[client_name]["archive"]:
            date = entry["date"]
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=date, callback_data=f"edit_date_{client_name}_{date}")
            ])
        response = "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        print(f"[EDIT_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response, reply_markup=keyboard)
        await state.set_state(ClientStates.select_date_for_edit)
    else:
        response = f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è {client_name}."
        print(f"[EDIT_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
        await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_date_"))
async def select_date_for_edit(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    date = callback.data.split("_")[3]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    await state.update_data(edit_date=date)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∑–∞ —Ü—é –¥–∞—Ç—É
    entry = next((e for e in user_clients[client_name]["archive"] if e["date"] == date), None)
    if entry:
        profile = entry["profile"]
        response = f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {client_name} –∑–∞ {date}:\n"
        response += f"–í—ñ–∫: {profile['age']}\n"
        response += f"–í–∞–≥–∞: {profile['weight']} –∫–≥\n"
        response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {profile['results']}\n"
        response += f"–î–æ–¥–∞—Ç–∫–æ–≤–æ: {profile['additional']}\n"
        response += "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫:"
        print(f"[SELECT_DATE_FOR_EDIT] Sending response: {response}")
        await callback.message.answer(response)
        await state.set_state(ClientStates.edit_client_info_age)
    await callback.answer()

@router.message(StateFilter(ClientStates.edit_client_info_age))
async def edit_client_info_age(message: Message, state: FSMContext):
    age = message.text.strip()
    await state.update_data(age=age)
    response = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≤–∞–≥—É (–∫–≥):"
    print(f"[EDIT_CLIENT_INFO_AGE] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.edit_client_info_weight)

@router.message(StateFilter(ClientStates.edit_client_info_weight))
async def edit_client_info_weight(message: Message, state: FSMContext):
    weight = message.text.strip()
    await state.update_data(weight=weight)
    response = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–æ–≥—Ä–µ—Å —É –≤–ø—Ä–∞–≤–∞—Ö):"
    print(f"[EDIT_CLIENT_INFO_WEIGHT] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.edit_client_info_results)

@router.message(StateFilter(ClientStates.edit_client_info_results))
async def edit_client_info_results(message: Message, state: FSMContext):
    results = message.text.strip()
    await state.update_data(results=results)
    response = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—è–∫—â–æ —î):"
    print(f"[EDIT_CLIENT_INFO_RESULTS] Sending response: {response}")
    await message.answer(response)
    await state.set_state(ClientStates.edit_client_info_additional)

@router.message(StateFilter(ClientStates.edit_client_info_additional))
async def edit_client_info_additional(message: Message, state: FSMContext):
    additional = message.text.strip()
    data = await state.get_data()
    client_name = data["client_name"]
    edit_date = data["edit_date"]
    user_id = message.from_user.id
    user_clients = load_clients(user_id)

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –∑–∞ –≤–∏–±—Ä–∞–Ω–æ—é –¥–∞—Ç–æ—é
    profile = {
        "age": data["age"],
        "weight": data["weight"],
        "results": data["results"],
        "additional": additional
    }
    for entry in user_clients[client_name]["archive"]:
        if entry["date"] == edit_date:
            entry["profile"] = profile
            break
    save_client(user_id, client_name, user_clients[client_name])

    response = f"–î–∞–Ω—ñ –¥–ª—è {client_name} –∑–∞ {edit_date} –æ–Ω–æ–≤–ª–µ–Ω–æ!"
    print(f"[EDIT_CLIENT_INFO_ADDITIONAL] Sending response: {response}")
    await message.answer(response)
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏"
@router.callback_query(F.data.startswith("delete_info_"))
async def delete_client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    
    if client_name in user_clients and user_clients[client_name]["archive"]:
        await state.update_data(client_name=client_name)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for entry in user_clients[client_name]["archive"]:
            date = entry["date"]
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=date, callback_data=f"delete_date_{client_name}_{date}")
            ])
        response = "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"
        print(f"[DELETE_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response, reply_markup=keyboard)
        await state.set_state(ClientStates.select_date_for_delete)
    else:
        response = f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è {client_name}."
        print(f"[DELETE_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
        await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("delete_date_"))
async def select_date_for_delete(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    date = callback.data.split("_")[3]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)

    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∑–∞ –≤–∏–±—Ä–∞–Ω–æ—é –¥–∞—Ç–æ—é
    user_clients[client_name]["archive"] = [e for e in user_clients[client_name]["archive"] if e["date"] != date]
    save_client(user_id, client_name, user_clients[client_name])

    response = f"–î–∞–Ω—ñ –¥–ª—è {client_name} –∑–∞ {date} –≤–∏–¥–∞–ª–µ–Ω–æ!"
    print(f"[SELECT_DATE_FOR_DELETE] Sending response: {response}")
    await callback.message.answer(response)
    await state.clear()
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"
@router.callback_query(F.data.startswith("add_new_info_"))
async def add_new_client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[3]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    if client_name in user_clients:
        await state.update_data(client_name=client_name)
        response = f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}:"
        print(f"[ADD_NEW_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
        await state.set_state(ClientStates.client_info_age)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"
@router.callback_query(F.data.startswith("analyze_info_"))
async def analyze_client_info(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[2]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    
    if client_name in user_clients and user_clients[client_name]["archive"]:
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–∞—Ç–æ—é
        entries = sorted(user_clients[client_name]["archive"], key=lambda x: x["date"])
        
        # –ê–Ω–∞–ª—ñ–∑ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
        week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
        week_entries = [e for e in entries if e["date"] >= week_ago]
        week_analysis = "–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:\n"
        if len(week_entries) >= 2:
            old_weight = float(week_entries[0]["profile"]["weight"])
            new_weight = float(week_entries[-1]["profile"]["weight"])
            weight_change = new_weight - old_weight
            week_analysis += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:+.1f} –∫–≥\n"
            week_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É: {week_entries[0]['profile']['results']}\n"
            week_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ: {week_entries[-1]['profile']['results']}\n"
        else:
            week_analysis += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"

        # –ê–Ω–∞–ª—ñ–∑ –∑–∞ –º—ñ—Å—è—Ü—å (–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤)
        month_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        month_entries = [e for e in entries if e["date"] >= month_ago]
        month_analysis = "–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å:\n"
        if len(month_entries) >= 2:
            old_weight = float(month_entries[0]["profile"]["weight"])
            new_weight = float(month_entries[-1]["profile"]["weight"])
            weight_change = new_weight - old_weight
            month_analysis += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:+.1f} –∫–≥\n"
            month_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É: {month_entries[0]['profile']['results']}\n"
            month_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ: {month_entries[-1]['profile']['results']}\n"
        else:
            month_analysis += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ –º—ñ—Å—è—Ü—å.\n"

        response = f"–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è {client_name}:\n\n{week_analysis}\n{month_analysis}"
        print(f"[ANALYZE_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
    else:
        response = f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {client_name}."
        print(f"[ANALYZE_CLIENT_INFO] Sending response: {response}")
        await callback.message.answer(response)
    await state.clear()
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìà –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤"
@router.message(F.text == "üìà –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
async def track_client_metrics(message: Message, state: FSMContext):
    if message.from_user.id not in ALLOWED_USERS:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
        print(f"[TRACK_CLIENT_METRICS] Sending response: {response}")
        await message.answer(response)
        return
    user_id = message.from_user.id
    user_clients = load_clients(user_id)
    if not user_clients:
        response = "–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        print(f"[TRACK_CLIENT_METRICS] Sending response: {response}")
        await message.answer(response)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for client_name in user_clients.keys():
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=client_name, callback_data=f"track_{client_name}")
        ])
    response = "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤:"
    print(f"[TRACK_CLIENT_METRICS] Sending response: {response}")
    await message.answer(response, reply_markup=keyboard)
    await state.set_state(ClientStates.select_client_for_tracking)

@router.callback_query(F.data.startswith("track_"))
async def track_selected_client(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_clients = load_clients(user_id)
    
    if client_name in user_clients:
        if user_clients[client_name]["archive"]:
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–∞—Ç–æ—é
            entries = sorted(user_clients[client_name]["archive"], key=lambda x: x["date"])
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            response = f"–î–∞–Ω—ñ –¥–ª—è {client_name}:\n\n"
            for entry in entries:
                date = entry["date"]
                profile = entry["profile"]
                response += f"–î–∞—Ç–∞: {date}\n"
                response += f"–í—ñ–∫: {profile['age']}\n"
                response += f"–í–∞–≥–∞: {profile['weight']} –∫–≥\n"
                response += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {profile['results']}\n"
                response += f"–î–æ–¥–∞—Ç–∫–æ–≤–æ: {profile['additional']}\n\n"
            
            # –ê–Ω–∞–ª—ñ–∑ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
            week_entries = [e for e in entries if e["date"] >= week_ago]
            week_analysis = "–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:\n"
            if len(week_entries) >= 2:
                old_weight = float(week_entries[0]["profile"]["weight"])
                new_weight = float(week_entries[-1]["profile"]["weight"])
                weight_change = new_weight - old_weight
                week_analysis += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:+.1f} –∫–≥\n"
                week_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É: {week_entries[0]['profile']['results']}\n"
                week_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ: {week_entries[-1]['profile']['results']}\n"
            else:
                week_analysis += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"

            # –ê–Ω–∞–ª—ñ–∑ –∑–∞ –º—ñ—Å—è—Ü—å
            month_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
            month_entries = [e for e in entries if e["date"] >= month_ago]
            month_analysis = "–ê–Ω–∞–ª—ñ–∑ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å:\n"
            if len(month_entries) >= 2:
                old_weight = float(month_entries[0]["profile"]["weight"])
                new_weight = float(month_entries[-1]["profile"]["weight"])
                weight_change = new_weight - old_weight
                month_analysis += f"–ó–º—ñ–Ω–∞ –≤–∞–≥–∏: {weight_change:+.1f} –∫–≥\n"
                month_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É: {month_entries[0]['profile']['results']}\n"
                month_analysis += f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫—ñ–Ω—Ü—ñ: {month_entries[-1]['profile']['results']}\n"
            else:
                month_analysis += "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ –º—ñ—Å—è—Ü—å.\n"

            response += f"\n{week_analysis}\n{month_analysis}"
            print(f"[TRACK_SELECTED_CLIENT] Sending response: {response}")
            await callback.message.answer(response)
        else:
            response = f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ {client_name} –Ω–µ–º–∞—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."
            print(f"[TRACK_SELECTED_CLIENT] Sending response: {response}")
            await callback.message.answer(response)
    await state.clear()
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /update
@router.message(Command("update"))
async def update_bot(message: Message):
    if message.from_user.id not in ALLOWED_USERS:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
        print(f"[UPDATE] Sending response: {response}")
        await message.answer(response)
        return

    response = "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞..."
    print(f"[UPDATE] Sending response: {response}")
    await message.answer(response)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥ —ñ–∑ GitHub
    url = "https://raw.githubusercontent.com/bohdan123/telegram-bot-code/main/bot.py"
    try:
        response = requests.get(url)
        if response.status_code != 200:
            response = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–¥—É: {response.status_code} {response.reason}"
            print(f"[UPDATE] Sending response: {response}")
            await message.answer(response)
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥
        with open("/app/bot.py", "w") as f:
            f.write(response.text)

        response = "–ö–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞..."
        print(f"[UPDATE] Sending response: {response}")
        await message.answer(response)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        response = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {e}"
        print(f"[UPDATE] Sending response: {response}")
        await message.answer(response)

# FastAPI –µ–Ω–¥–ø–æ—ñ–Ω—Ç
@app.get("/")
async def root():
    return {"message": "Bot is running"}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞...")
    dp.include_router(router)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤–µ–±—Ö—É–∫–∞
    print("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞...")
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url:
        print(f"–í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–Ω–∏–π: {webhook_info.url}. –í–∏–¥–∞–ª—è—î–º–æ...")
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    else:
        print("–í–µ–±—Ö—É–∫ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")

    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ polling —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...")
    polling_task = asyncio.create_task(dp.start_polling(bot))
    print("Polling –∑–∞–ø—É—â–µ–Ω–æ.")

    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI-—Å–µ—Ä–≤–µ—Ä...")
    config = uvicorn.Config(app, host="0.0.0.0", port=8080, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

    await polling_task

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
